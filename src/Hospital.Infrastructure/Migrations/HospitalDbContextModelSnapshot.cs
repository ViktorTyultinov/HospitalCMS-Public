// <auto-generated />
using System;
using Hospital.Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Hospital.Infrastructure.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    partial class HospitalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Hospital.Domain.Entities.Devices.MedicalDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("device_type");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uuid")
                        .HasColumnName("hospital_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("serial_number");

                    b.Property<Guid?>("StorageUnitId")
                        .HasColumnType("uuid")
                        .HasColumnName("storage_unit_id");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("StorageUnitId");

                    b.ToTable("medical_devices", (string)null);
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Locations.Bed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("BedNumber")
                        .HasColumnType("integer")
                        .HasColumnName("bed_number");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid")
                        .HasColumnName("room_id");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId", "BedNumber")
                        .IsUnique();

                    b.ToTable("beds", (string)null);
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Locations.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("address");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uuid")
                        .HasColumnName("hospital_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Locations.Hospital", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("hospitals", (string)null);
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Locations.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("address");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("Floor")
                        .HasColumnType("integer")
                        .HasColumnName("floor");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("integer")
                        .HasColumnName("room_number");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("rooms", (string)null);
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Locations.StorageUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("address");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("storage_units", (string)null);
                });

            modelBuilder.Entity("Hospital.Domain.Entities.MedicalHistory.Diagnosis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("DiagnosisName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("diagnosis_name");

                    b.Property<Guid>("GeneralPractitionerCheckUpId")
                        .HasColumnType("uuid")
                        .HasColumnName("general_practitioner_check_up_id");

                    b.HasKey("Id");

                    b.HasIndex("GeneralPractitionerCheckUpId")
                        .IsUnique();

                    b.ToTable("diagnoses", (string)null);
                });

            modelBuilder.Entity("Hospital.Domain.Entities.MedicalHistory.GeneralPractitionerCheckUp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CheckupDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("checkup_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DiagnosisId")
                        .HasColumnType("uuid")
                        .HasColumnName("diagnosis_id");

                    b.Property<Guid>("GeneralPractitionerId")
                        .HasColumnType("uuid")
                        .HasColumnName("general_practitioner_id");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.Property<Guid>("PrescriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("prescription_id");

                    b.HasKey("Id");

                    b.HasIndex("GeneralPractitionerId");

                    b.HasIndex("PatientId");

                    b.ToTable("general_practitioner_check_ups", (string)null);
                });

            modelBuilder.Entity("Hospital.Domain.Entities.MedicalHistory.PatientMedicalHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("medical_histories", (string)null);
                });

            modelBuilder.Entity("Hospital.Domain.Entities.MedicalHistory.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("GeneralPractitionerCheckUpId")
                        .HasColumnType("uuid")
                        .HasColumnName("general_practitioner_check_up_id");

                    b.Property<DateTime>("PrescriptionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("prescription_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("GeneralPractitionerCheckUpId")
                        .IsUnique();

                    b.ToTable("prescriptions", (string)null);
                });

            modelBuilder.Entity("Hospital.Domain.Entities.MedicalHistory.PrescriptionLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("dosage");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("frequency");

                    b.Property<string>("Instructions")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("instructions");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("medication_name");

                    b.Property<Guid>("PrescriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("prescription_id");

                    b.HasKey("Id");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("prescription_lines", (string)null);
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Users.GeneralPractitionerProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uuid")
                        .HasColumnName("hospital_id");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("general_practitioner_profiles", (string)null);
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Users.NurseProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("HospitalId")
                        .HasColumnType("uuid")
                        .HasColumnName("hospital_id");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("nurse_profiles", (string)null);
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Users.PatientProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("GeneralPractitionerProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("general_practitioner_profile_id");

                    b.Property<Guid?>("MedicalHistoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("medical_history_id");

                    b.HasKey("Id");

                    b.HasIndex("GeneralPractitionerProfileId");

                    b.HasIndex("MedicalHistoryId")
                        .IsUnique();

                    b.ToTable("patient_profiles", (string)null);
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Users.SpecialistProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("HospitalId")
                        .HasColumnType("uuid")
                        .HasColumnName("hospital_id");

                    b.Property<int>("Specialty")
                        .HasColumnType("integer")
                        .HasColumnName("specialty");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("specialist_profiles", (string)null);
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<Guid?>("GeneralPractitionerProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("general_practitioner_profile_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<Guid?>("NurseProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("nurse_profile_id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<Guid?>("PatientProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_profile_id");

                    b.Property<Guid?>("SpecialistProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("specialist_profile_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("GeneralPractitionerProfileId");

                    b.HasIndex("NurseProfileId");

                    b.HasIndex("PatientProfileId");

                    b.HasIndex("SpecialistProfileId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Devices.MedicalDevice", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Locations.Hospital", "Hospital")
                        .WithMany("MedicalDevices")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Hospital.Domain.Entities.Locations.StorageUnit", null)
                        .WithMany("MedicalDevices")
                        .HasForeignKey("StorageUnitId");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Locations.Bed", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Users.PatientProfile", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Hospital.Domain.Entities.Locations.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Locations.Department", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Locations.Hospital", "Hospital")
                        .WithMany("Departments")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Locations.Room", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Locations.Department", "Department")
                        .WithMany("Rooms")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Locations.StorageUnit", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Locations.Department", "Department")
                        .WithMany("StorageUnits")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.MedicalHistory.Diagnosis", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.MedicalHistory.GeneralPractitionerCheckUp", "GeneralPractitionerCheckUp")
                        .WithOne("Diagnosis")
                        .HasForeignKey("Hospital.Domain.Entities.MedicalHistory.Diagnosis", "GeneralPractitionerCheckUpId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GeneralPractitionerCheckUp");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.MedicalHistory.GeneralPractitionerCheckUp", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Users.GeneralPractitionerProfile", "GeneralPractitioner")
                        .WithMany()
                        .HasForeignKey("GeneralPractitionerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hospital.Domain.Entities.Users.PatientProfile", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralPractitioner");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.MedicalHistory.PatientMedicalHistory", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Users.PatientProfile", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.MedicalHistory.Prescription", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.MedicalHistory.GeneralPractitionerCheckUp", "GeneralPractitionerCheckUp")
                        .WithOne("Prescription")
                        .HasForeignKey("Hospital.Domain.Entities.MedicalHistory.Prescription", "GeneralPractitionerCheckUpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralPractitionerCheckUp");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.MedicalHistory.PrescriptionLine", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.MedicalHistory.Prescription", "Prescription")
                        .WithMany("PrescriptionLines")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Users.GeneralPractitionerProfile", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Locations.Hospital", "Hospital")
                        .WithMany("GeneralPractitioners")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Users.NurseProfile", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Locations.Hospital", "Hospital")
                        .WithMany("Nurses")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Users.PatientProfile", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Users.GeneralPractitionerProfile", "GeneralPractitionerProfile")
                        .WithMany("Patients")
                        .HasForeignKey("GeneralPractitionerProfileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Hospital.Domain.Entities.MedicalHistory.PatientMedicalHistory", "MedicalHistory")
                        .WithOne()
                        .HasForeignKey("Hospital.Domain.Entities.Users.PatientProfile", "MedicalHistoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("GeneralPractitionerProfile");

                    b.Navigation("MedicalHistory");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Users.SpecialistProfile", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Locations.Hospital", "Hospital")
                        .WithMany("Specialists")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Users.User", b =>
                {
                    b.HasOne("Hospital.Domain.Entities.Users.GeneralPractitionerProfile", "GeneralPractitionerProfile")
                        .WithMany()
                        .HasForeignKey("GeneralPractitionerProfileId");

                    b.HasOne("Hospital.Domain.Entities.Users.NurseProfile", "NurseProfile")
                        .WithMany()
                        .HasForeignKey("NurseProfileId");

                    b.HasOne("Hospital.Domain.Entities.Users.PatientProfile", "PatientProfile")
                        .WithMany()
                        .HasForeignKey("PatientProfileId");

                    b.HasOne("Hospital.Domain.Entities.Users.SpecialistProfile", "SpecialistProfile")
                        .WithMany()
                        .HasForeignKey("SpecialistProfileId");

                    b.Navigation("GeneralPractitionerProfile");

                    b.Navigation("NurseProfile");

                    b.Navigation("PatientProfile");

                    b.Navigation("SpecialistProfile");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Locations.Department", b =>
                {
                    b.Navigation("Rooms");

                    b.Navigation("StorageUnits");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Locations.Hospital", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("GeneralPractitioners");

                    b.Navigation("MedicalDevices");

                    b.Navigation("Nurses");

                    b.Navigation("Specialists");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Locations.Room", b =>
                {
                    b.Navigation("Beds");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Locations.StorageUnit", b =>
                {
                    b.Navigation("MedicalDevices");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.MedicalHistory.GeneralPractitionerCheckUp", b =>
                {
                    b.Navigation("Diagnosis");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.MedicalHistory.Prescription", b =>
                {
                    b.Navigation("PrescriptionLines");
                });

            modelBuilder.Entity("Hospital.Domain.Entities.Users.GeneralPractitionerProfile", b =>
                {
                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
